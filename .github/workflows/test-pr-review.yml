name: Test Custom Endpoint - PR Review

# This tests the action as a real user would use it
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]

jobs:
  test-pr-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}
          DIFF=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} || echo "No changes found")
          # Escape the diff for GitHub Actions output
          DIFF="${DIFF//'%'/'%25'}"
          DIFF="${DIFF//$'\n'/'%0A'}"
          DIFF="${DIFF//$'\r'/'%0D'}"
          echo "diff=$DIFF" >> $GITHUB_OUTPUT

      - name: Review code with custom AI endpoint
        id: review
        # uses: ./ tells GitHub to look for action.yml in the repo root
        # action.yml (in this repo) defines the steps that run dist/main.js
        uses: ./
        with:
          openai-api-key: ${{ secrets.CUSTOM_API_KEY }}
          custom-api-base-url: ${{ secrets.CUSTOM_API_BASE_URL }}
          custom-model: ${{ secrets.CUSTOM_MODEL }}
          prompt: |
            You are a senior software engineer performing an in-depth code review of a pull request.
            The input will contain the pull request title, description, and code diff.
            Your goal is to produce a professional review comment in Markdown format.

            **Instructions:**
            1. Understand the PR purpose from its title and description.
            2. Examine the code changes for:
               - Logic errors or bugs
               - Code quality and readability
               - Architecture and design consistency
               - Security or performance risks
               - Test coverage and documentation gaps
            3. Give specific, actionable feedback â€” mention file names and lines if possible.
            4. Summarize your findings under clear sections:
               -  PR Summary
               -  Issues to Address
               -  Suggestions or Improvements
               -  Good Practices

            **Output format (Markdown):**
            ```
            ##  PR Review Summary
            **Intent:** <one-line summary>

            ###  Issues to Address
            1. **[file:line]** - <problem + suggestion>

            ###  Suggestions / Enhancements
            - <ideas for better structure, clarity, or efficiency>

            ###  Good Practices
            - <positive notes or patterns worth keeping>
            ```

            Be concise but thorough, constructive, and professional.
            Avoid generic praise. Focus on helping the developer improve code quality and maintainability.

            **PR Context:**
            Title: ${{ github.event.pull_request.title }}
            Description: ${{ github.event.pull_request.body }}
            
            **Code Changes:**
            ${{ steps.diff.outputs.diff }}

      - name: Post review comment
        if: github.event_name == 'pull_request' && steps.review.outputs.final-message != ''
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '## AI Code Review\n\n' + process.env.REVIEW
            });
        env:
          REVIEW: ${{ steps.review.outputs.final-message }}

      - name: Show results
        run: |
          echo " Test completed!"
          echo "AI endpoint used: ${{ secrets.CUSTOM_API_BASE_URL }}"
          echo ""
          echo "Review output:"
          echo "${{ steps.review.outputs.final-message }}"